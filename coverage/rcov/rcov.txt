metric_fu shift the first line
================================================================================
 ./app/controllers/application_controller.rb
================================================================================
   class ApplicationController < ActionController::Base
   	include Pagy::Backend
     protect_from_forgery with: :exception
--   
     protected
     	def after_sign_in_path_for(resource_or_scope)
!!   		if current_user.is_admin?
!!   			backoffice_path
--   		else
!!   			root_path
--   		end
-- 	end
-- end

================================================================================
 ./app/controllers/rooms_controller.rb
================================================================================
-- ##
-- # Classe Controller que é responsável por gerenciar o sistema de salas
-- # Se o usuário comum estiver logado, ele pode somente visualizar as salas
-- # Se o usuário administrador estiver logado, ele pode criar, editar e remover uma sala
-- 
   class RoomsController < ApplicationController
-- 
       before_action :signed_in?
   	before_action :is_admin?, only: [:new, :create, :destroy]
-- 	
-- 	##
--   	# GET /rooms/new
--   	# Descrição: Controller cria uma sala nova
--   	# Valor de retorno: Retorna a sala criada
--   	# Argumentos: Parâmetros da sala a ser criada
-- 	# Colaterais: Nenhum colateral.
   	def new
!! 		@room = Room.new
-- 	end
-- 
-- 	##
--   	# GET /rooms
--   	# Controller que lista todas as salas do sistema usando paginação
--     # Pode receber como parâmetro o número da página desejada GET /rooms?page=x sendo x o número da página
-- 	# @pagy recebe o parâmetro, default=1
--     # @rooms recebe  o resultado da busca no banco de dados, seu tamanho é sempre menor ou igual a 5
   	def index
   		@pagy, @rooms = pagy(Room.all)
-- 	end
-- 
-- 	##
--   	# GET /rooms/show
--   	# Descrição: Controller que faz a busca de uma sala específica.
--   	# Valor de retorno: Retorna a sala caso seja encontrada.
--   	# Argumentos: recebe o 'id' da sala.
-- 	# Colaterais: Nenhum colateral.
   	def show
!! 		@room = Room.find(params[:id])
-- 	end
-- 
-- 	##
--   	# GET /rooms/edit
--   	# Descrição: 
--   	# Valor de retorno: 
--   	# Argumentos: recebe o 'id' da sala.
-- 	# Colaterais: 
   	def edit
!! 		@room = Room.find(params[:id])
-- 	end
-- 
-- 	##
-- 	# GET /rooms/<id>
--   	# Descrição: Modifica as informações de uma sala no banco de dados
--   	# Valor de retorno: 
--   	# Argumentos: recebe o 'id' da sala.
-- 	# Colaterais: Exibe uma mensagem com o status da operação (sucesso ou erro), e redireciona para
-- 	# a página da sala modificada no banco em caso de sucesso. caso contrário redireciona para 
-- 	# a página que permite preencher o formulário e modificar os dados da sala
   	def update
!! 		@room = Room.find(params[:id])
!! 		if @room.update(room_params)
!! 			redirect_to @room
!! 			flash[:notice] = "A sala foi editada com sucesso!"
-- 		else
!! 			flash[:danger] = "A sala não pôde ser editada! Tente novamente!"
!! 			render 'edit'
-- 		end
-- 	end
-- 
-- 	##
--   	# POST /rooms/create
--   	# Descrição: Controller que faz a criação de uma nova sala.
--   	# Valor de retorno: ???
--   	# Argumentos: Recebe os dados da sala.
-- 	# Colaterais: Exibe uma mensagem com o status da operação (sucesso ou erro), e cria
-- 	# a sala no banco em caso de sucesso. Ao final redireciona para a página principal.
   	def create
!! 		@room = Room.new(room_params)
!! 		if @room.save
!! 			flash[:notice] = "A sala foi criada com sucesso!"
-- 		else
!! 			flash[:danger] = "A sala não pôde ser criada!"
-- 		end
!! 		redirect_to backoffice_path
-- 	end
-- 
-- 	##
--   	# GET /rooms/destroy
--   	# Descrição: Controller que exclui uma sala já criada.
--   	# Valor de retorno: ???
--   	# Argumentos: Recebe como parâmetro o 'id' da sala para fazer a query.
-- 	# Colaterais: Exibe uma mensagem de sucesso caso tenha excluído a sala e redireciona para a
-- 	# página principal.
   	def destroy
!! 		@room = Room.find(params[:id])
!! 		@room.destroy
!! 		flash[:danger] = "A sala foi excluída"
!! 		redirect_to backoffice_path
-- 	end
-- 
-- 
   	private
-- 
-- 	##
--   	# Descrição: O metódo checa se um usuário está logado.
--   	# Argumentos: o metódo não recebe nenhum argumento
-- 	# Valores de retorno: Retorna Retorna um 'boolean' se o usuário estiver logado, se não for invoca
-- 	# o método 'no_permission'.
-- 	# Colaterais:Nenhum colateral. Nenhum
-- 	#def signed_in?
-- 		#if current_user
-- 			#true
-- 		#else
-- 			#no_permission()
-- 		#end
--   	#end
-- 
   	def signed_in?
       	if !current_user
               flash[:danger] = "Você não pode acessar essa página"
               return redirect_to '/'            
--         end
               return true
--     end
-- 
-- 	##
--   	# Descrição: Método que verifica se o usuário logado é um administrador ou não.
--   	# Valor de retorno: Retorna um 'boolean' se o usuário for administrador, se não for invoca
-- 	# o método 'no_permission'.
--   	# Argumentos: Não recebe nenhum parâmetro.
-- 	# Colaterais: Nenhum colateral.
-- 	#def is_admin?
-- 	#	if current_user.is_admin
-- 	#		true
-- 	#	else
-- 	#		no_permission()
-- 	#	end
-- 	#end
-- 
   	def is_admin?
!!         if !current_user.is_admin
!!             flash[:danger] = "Você não pode acessar essa página"
!!             return redirect_to '/'        
--         end
!!                 return true
--     end
-- 	
-- 	##
--   	# Descrição: Método invocado quando o usuário não tem as permissões necessárias para acessar a página.
--   	# Valor de retorno: Não retorna nenhum valor.
--   	# Argumentos: Não recebe nenhum parâmetro.
-- 	# Colaterais: Exibe a mensagem indicando que o usuário não pode acessar a página e redireciona para a
-- 	# página inicial.
-- 	#def no_permission
-- 	#	flash[:danger] = "Você não pode acessar essa página"
-- 	#	return redirect_to '/'
-- 	#end
-- 
-- 	##
-- 	# GET /rooms/new
-- 	# Parâmetros permitidos para a criação dos campos nome, local e capacidade da sala
-- 	# POST /rooms
-- 	# Assim como para renderizar na view do usuário, e assim um usuário não administrador
-- 	# poder ver a capacidade máxima da sala
   	def room_params
!! 		params.require(:room).permit(:name, :location, :students)
-- 	end
-- end

================================================================================
 ./app/helpers/admins_helper.rb
================================================================================
   module AdminsHelper
-- end

================================================================================
 ./app/helpers/application_helper.rb
================================================================================
   module ApplicationHelper
       include Pagy::Frontend
       require 'capybara/rails'
--     #Capybara.app = MyRackApp
-- 
       def resource_name
!!         :user
--     end
-- 
       def resource
!!         @resource ||= User.new
--     end
-- 
       def devise_mapping
!!         @devise_mapping ||= Devise.mappings[:user]
--     end
-- end

================================================================================
 ./app/helpers/backoffice/dashboard_helper.rb
================================================================================
   module Backoffice::DashboardHelper
   	def resource_name
!! 		:user
-- 	end
-- 
   	def resource
!! 		@resource ||= User.new
-- 	end
-- 
   	def resource_class
!! 		User
-- 	end
-- 
   	def devise_mapping
!! 		@devise_mapping ||= Devise.mappings[:user]
-- 	end
-- end

================================================================================
 ./app/helpers/backoffice_helper.rb
================================================================================
   module BackofficeHelper
-- end

================================================================================
 ./app/helpers/room_helper.rb
================================================================================
   module RoomHelper
-- end

================================================================================
 ./app/helpers/rooms_helper.rb
================================================================================
   module RoomsHelper
-- end

================================================================================
 ./app/helpers/users_helper.rb
================================================================================
   module UsersHelper
-- end

================================================================================
 ./app/models/application_record.rb
================================================================================
   class ApplicationRecord < ActiveRecord::Base
     self.abstract_class = true
-- end

================================================================================
 ./app/models/room.rb
================================================================================
-- # Classe que declara uma sala disponível para aluguel
-- # cadastrada com os dados "nome", "capacidade" e "local"
   class Room < ApplicationRecord
   	has_many :appointments
   	has_many :users, :through => :appointments
   	validates :name, presence: true, length: {minimum: 3, maximum: 50}
   	validates :location, presence: true, length: {minimum: 3, maximum: 50}
-- end

================================================================================
 ./app/models/user.rb
================================================================================
   class User < ApplicationRecord
--   # Include default devise modules. Others available are:
--   # :confirmable, :lockable, :timeoutable and :omniauthable
     has_many :appointments
     has_many :rooms, :through => :appointments
--   
     validates :username, :course, :registration, :presence => true
     devise :database_authenticatable, :registerable,
--          :recoverable, :rememberable, :trackable, :validatable
-- 
     def is_admin?
!!   	self.is_admin
--   end
-- end

================================================================================
 ./config/application.rb
================================================================================
   require_relative 'boot'
-- 
   require "rails"
-- # Pick the frameworks you want:
   require "active_model/railtie"
   require "active_job/railtie"
   require "active_record/railtie"
   require "action_controller/railtie"
   require "action_mailer/railtie"
   require "action_view/railtie"
   require "action_cable/engine"
   require "sprockets/railtie"
-- # require "rails/test_unit/railtie"
-- 
-- # Require the gems listed in Gemfile, including any gems
-- # you've limited to :test, :development, or :production.
   Bundler.require(*Rails.groups)
-- 
   module ReservaDeSalas
     class Application < Rails::Application
--     # Initialize configuration defaults for originally generated Rails version.
       config.load_defaults 5.1
-- 
--     # Settings in config/environments/* take precedence over those specified here.
--     # Application configuration should go into files in config/initializers
--     # -- all .rb files in that directory are automatically loaded.
-- 
--     # Don't generate system test files.
       config.generators.system_tests = nil
--   end
-- end

================================================================================
 ./config/boot.rb
================================================================================
   ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)
-- 
   require 'bundler/setup' # Set up gems listed in the Gemfile.

================================================================================
 ./config/environment.rb
================================================================================
-- # Load the Rails application.
   require_relative 'application'
-- 
-- # Initialize the Rails application.
   Rails.application.initialize!

================================================================================
 ./config/environments/test.rb
================================================================================
   Rails.application.configure do
--   # Settings specified here will take precedence over those in config/application.rb.
-- 
--   # The test environment is used exclusively to run your application's
--   # test suite. You never need to work with it otherwise. Remember that
--   # your test database is "scratch space" for the test suite and is wiped
--   # and recreated between test runs. Don't rely on the data there!
     config.cache_classes = true
-- 
--   # Do not eager load code on boot. This avoids loading your whole application
--   # just for the purpose of running a single test. If you are using a tool that
--   # preloads Rails for running tests, you may have to set it to true.
     config.eager_load = false
-- 
--   # Configure public file server for tests with Cache-Control for performance.
     config.public_file_server.enabled = true
     config.public_file_server.headers = {
--     'Cache-Control' => "public, max-age=#{1.hour.seconds.to_i}"
--   }
-- 
--   # Show full error reports and disable caching.
     config.consider_all_requests_local       = true
     config.action_controller.perform_caching = false
-- 
--   # Raise exceptions instead of rendering exception templates.
     config.action_dispatch.show_exceptions = false
-- 
--   # Disable request forgery protection in test environment.
     config.action_controller.allow_forgery_protection = false
     config.action_mailer.perform_caching = false
-- 
--   # Tell Action Mailer not to deliver emails to the real world.
--   # The :test delivery method accumulates sent emails in the
--   # ActionMailer::Base.deliveries array.
     config.action_mailer.delivery_method = :test
-- 
--   # Print deprecation notices to the stderr.
     config.active_support.deprecation = :stderr
-- 
--   # Raises error for missing translations
--   # config.action_view.raise_on_missing_translations = true
-- end

================================================================================
 ./config/initializers/application_controller_renderer.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # ActiveSupport::Reloader.to_prepare do
-- #   ApplicationController.renderer.defaults.merge!(
-- #     http_host: 'example.org',
-- #     https: false
-- #   )
-- # end

================================================================================
 ./config/initializers/assets.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # Version of your assets, change this if you want to expire all your assets.
   Rails.application.config.assets.version = '1.0'
-- 
-- # Add additional assets to the asset load path.
-- # Rails.application.config.assets.paths << Emoji.images_path
-- # Add Yarn node_modules folder to the asset load path.
   Rails.application.config.assets.paths << Rails.root.join('node_modules')
   Rails.application.config.assets.precompile += %w( header.js )
   Rails.application.config.assets.precompile += %w( header.css )
   Rails.application.config.assets.precompile += %w( login-register-form.css )
   Rails.application.config.assets.precompile += %w( form-utils.css )
-- # Precompile additional assets.
-- # application.js, application.css, and all non-JS/CSS in the app/assets
-- # folder are already added.
   Rails.application.config.assets.precompile += %w(1.jpg 2.jpg 3.jpg)

================================================================================
 ./config/initializers/backtrace_silencers.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # You can add backtrace silencers for libraries that you're using but don't wish to see in your backtraces.
-- # Rails.backtrace_cleaner.add_silencer { |line| line =~ /my_noisy_library/ }
-- 
-- # You can also remove all the silencers if you're trying to debug a problem that might stem from framework code.
-- # Rails.backtrace_cleaner.remove_silencers!

================================================================================
 ./config/initializers/cookies_serializer.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # Specify a serializer for the signed and encrypted cookie jars.
-- # Valid options are :json, :marshal, and :hybrid.
   Rails.application.config.action_dispatch.cookies_serializer = :json

================================================================================
 ./config/initializers/devise.rb
================================================================================
-- # frozen_string_literal: true
-- 
-- # Use this hook to configure devise mailer, warden hooks and so forth.
-- # Many of these configuration options can be set straight in your model.
   Devise.setup do |config|
--   # The secret key used by Devise. Devise uses this key to generate
--   # random tokens. Changing this key will render invalid all existing
--   # confirmation, reset password and unlock tokens in the database.
--   # Devise will use the `secret_key_base` as its `secret_key`
--   # by default. You can change it below and use your own secret key.
--   # config.secret_key = 'f9c55141d37b1008a6a501a9468a94aef6829684a773a6a1be7d3e8a0eda358c120bfa07b8ea7ae3f03864f363596b66818be31b462f901ee8ab2540e2297a8b'
--   
--   # ==> Controller configuration
--   # Configure the parent class to the devise controllers.
--   # config.parent_controller = 'DeviseController'
-- 
--   # ==> Mailer Configuration
--   # Configure the e-mail address which will be shown in Devise::Mailer,
--   # note that it will be overwritten if you use your own mailer class
--   # with default "from" parameter.
     config.mailer_sender = 'please-change-me-at-config-initializers-devise@example.com'
-- 
--   # Configure the class responsible to send e-mails.
--   # config.mailer = 'Devise::Mailer'
-- 
--   # Configure the parent class responsible to send e-mails.
--   # config.parent_mailer = 'ActionMailer::Base'
-- 
--   # ==> ORM configuration
--   # Load and configure the ORM. Supports :active_record (default) and
--   # :mongoid (bson_ext recommended) by default. Other ORMs may be
--   # available as additional gems.
     require 'devise/orm/active_record'
-- 
--   # ==> Configuration for any authentication mechanism
--   # Configure which keys are used when authenticating a user. The default is
--   # just :email. You can configure it to use [:username, :subdomain], so for
--   # authenticating a user, both parameters are required. Remember that those
--   # parameters are used only when authenticating and not when retrieving from
--   # session. If you need permissions, you should implement that in a before filter.
--   # You can also supply a hash where the value is a boolean determining whether
--   # or not authentication should be aborted when the value is not present.
--   # config.authentication_keys = [:email]
-- 
--   # Configure parameters from the request object used for authentication. Each entry
--   # given should be a request method and it will automatically be passed to the
--   # find_for_authentication method and considered in your model lookup. For instance,
--   # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.
--   # The same considerations mentioned for authentication_keys also apply to request_keys.
--   # config.request_keys = []
-- 
--   # Configure which authentication keys should be case-insensitive.
--   # These keys will be downcased upon creating or modifying a user and when used
--   # to authenticate or find a user. Default is :email.
     config.case_insensitive_keys = [:email]
-- 
--   # Configure which authentication keys should have whitespace stripped.
--   # These keys will have whitespace before and after removed upon creating or
--   # modifying a user and when used to authenticate or find a user. Default is :email.
     config.strip_whitespace_keys = [:email]
-- 
--   # Tell if authentication through request.params is enabled. True by default.
--   # It can be set to an array that will enable params authentication only for the
--   # given strategies, for example, `config.params_authenticatable = [:database]` will
--   # enable it only for database (email + password) authentication.
--   # config.params_authenticatable = true
-- 
--   # Tell if authentication through HTTP Auth is enabled. False by default.
--   # It can be set to an array that will enable http authentication only for the
--   # given strategies, for example, `config.http_authenticatable = [:database]` will
--   # enable it only for database authentication. The supported strategies are:
--   # :database      = Support basic authentication with authentication key + password
--   # config.http_authenticatable = false
-- 
--   # If 401 status code should be returned for AJAX requests. True by default.
--   # config.http_authenticatable_on_xhr = true
-- 
--   # The realm used in Http Basic Authentication. 'Application' by default.
--   # config.http_authentication_realm = 'Application'
-- 
--   # It will change confirmation, password recovery and other workflows
--   # to behave the same regardless if the e-mail provided was right or wrong.
--   # Does not affect registerable.
--   # config.paranoid = true
-- 
--   # By default Devise will store the user in session. You can skip storage for
--   # particular strategies by setting this option.
--   # Notice that if you are skipping storage for all authentication paths, you
--   # may want to disable generating routes to Devise's sessions controller by
--   # passing skip: :sessions to `devise_for` in your config/routes.rb
     config.skip_session_storage = [:http_auth]
-- 
--   # By default, Devise cleans up the CSRF token on authentication to
--   # avoid CSRF token fixation attacks. This means that, when using AJAX
--   # requests for sign in and sign up, you need to get a new CSRF token
--   # from the server. You can disable this option at your own risk.
--   # config.clean_up_csrf_token_on_authentication = true
-- 
--   # When false, Devise will not attempt to reload routes on eager load.
--   # This can reduce the time taken to boot the app but if your application
--   # requires the Devise mappings to be loaded during boot time the application
--   # won't boot properly.
--   # config.reload_routes = true
-- 
--   # ==> Configuration for :database_authenticatable
--   # For bcrypt, this is the cost for hashing the password and defaults to 11. If
--   # using other algorithms, it sets how many times you want the password to be hashed.
--   #
--   # Limiting the stretches to just one in testing will increase the performance of
--   # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use
--   # a value less than 10 in other environments. Note that, for bcrypt (the default
--   # algorithm), the cost increases exponentially with the number of stretches (e.g.
--   # a value of 20 is already extremely slow: approx. 60 seconds for 1 calculation).
     config.stretches = Rails.env.test? ? 1 : 11
-- 
--   # Set up a pepper to generate the hashed password.
--   # config.pepper = 'f938ad6354619b7d6415157b9a901bd8f5a87315f93c154a851e436112c2e9521ba1579eeb57b6e143b51dd524a5e0439b32d3139bd158f3bb70e1df0742bd36'
-- 
--   # Send a notification to the original email when the user's email is changed.
--   # config.send_email_changed_notification = false
-- 
--   # Send a notification email when the user's password is changed.
--   # config.send_password_change_notification = false
-- 
--   # ==> Configuration for :confirmable
--   # A period that the user is allowed to access the website even without
--   # confirming their account. For instance, if set to 2.days, the user will be
--   # able to access the website for two days without confirming their account,
--   # access will be blocked just in the third day. Default is 0.days, meaning
--   # the user cannot access the website without confirming their account.
--   # config.allow_unconfirmed_access_for = 2.days
-- 
--   # A period that the user is allowed to confirm their account before their
--   # token becomes invalid. For example, if set to 3.days, the user can confirm
--   # their account within 3 days after the mail was sent, but on the fourth day
--   # their account can't be confirmed with the token any more.
--   # Default is nil, meaning there is no restriction on how long a user can take
--   # before confirming their account.
--   # config.confirm_within = 3.days
-- 
--   # If true, requires any email changes to be confirmed (exactly the same way as
--   # initial account confirmation) to be applied. Requires additional unconfirmed_email
--   # db field (see migrations). Until confirmed, new email is stored in
--   # unconfirmed_email column, and copied to email column on successful confirmation.
     config.reconfirmable = true
-- 
--   # Defines which key will be used when confirming an account
--   # config.confirmation_keys = [:email]
-- 
--   # ==> Configuration for :rememberable
--   # The time the user will be remembered without asking for credentials again.
--   # config.remember_for = 2.weeks
-- 
--   # Invalidates all the remember me tokens when the user signs out.
     config.expire_all_remember_me_on_sign_out = true
-- 
--   # If true, extends the user's remember period when remembered via cookie.
--   # config.extend_remember_period = false
-- 
--   # Options to be passed to the created cookie. For instance, you can set
--   # secure: true in order to force SSL only cookies.
--   # config.rememberable_options = {}
-- 
--   # ==> Configuration for :validatable
--   # Range for password length.
     config.password_length = 6..128
-- 
--   # Email regex used to validate email formats. It simply asserts that
--   # one (and only one) @ exists in the given string. This is mainly
--   # to give user feedback and not to assert the e-mail validity.
     config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
-- 
--   # ==> Configuration for :timeoutable
--   # The time you want to timeout the user session without activity. After this
--   # time the user will be asked for credentials again. Default is 30 minutes.
--   # config.timeout_in = 30.minutes
-- 
--   # ==> Configuration for :lockable
--   # Defines which strategy will be used to lock an account.
--   # :failed_attempts = Locks an account after a number of failed attempts to sign in.
--   # :none            = No lock strategy. You should handle locking by yourself.
--   # config.lock_strategy = :failed_attempts
-- 
--   # Defines which key will be used when locking and unlocking an account
--   # config.unlock_keys = [:email]
-- 
--   # Defines which strategy will be used to unlock an account.
--   # :email = Sends an unlock link to the user email
--   # :time  = Re-enables login after a certain amount of time (see :unlock_in below)
--   # :both  = Enables both strategies
--   # :none  = No unlock strategy. You should handle unlocking by yourself.
--   # config.unlock_strategy = :both
-- 
--   # Number of authentication tries before locking an account if lock_strategy
--   # is failed attempts.
--   # config.maximum_attempts = 20
-- 
--   # Time interval to unlock the account if :time is enabled as unlock_strategy.
--   # config.unlock_in = 1.hour
-- 
--   # Warn on the last attempt before the account is locked.
--   # config.last_attempt_warning = true
-- 
--   # ==> Configuration for :recoverable
--   #
--   # Defines which key will be used when recovering the password for an account
--   # config.reset_password_keys = [:email]
-- 
--   # Time interval you can reset your password with a reset password key.
--   # Don't put a too small interval or your users won't have the time to
--   # change their passwords.
     config.reset_password_within = 6.hours
-- 
--   # When set to false, does not sign a user in automatically after their password is
--   # reset. Defaults to true, so a user is signed in automatically after a reset.
--   # config.sign_in_after_reset_password = true
-- 
--   # ==> Configuration for :encryptable
--   # Allow you to use another hashing or encryption algorithm besides bcrypt (default).
--   # You can use :sha1, :sha512 or algorithms from others authentication tools as
--   # :clearance_sha1, :authlogic_sha512 (then you should set stretches above to 20
--   # for default behavior) and :restful_authentication_sha1 (then you should set
--   # stretches to 10, and copy REST_AUTH_SITE_KEY to pepper).
--   #
--   # Require the `devise-encryptable` gem when using anything other than bcrypt
--   # config.encryptor = :sha512
-- 
--   # ==> Scopes configuration
--   # Turn scoped views on. Before rendering "sessions/new", it will first check for
--   # "users/sessions/new". It's turned off by default because it's slower if you
--   # are using only default views.
--   # config.scoped_views = false
-- 
--   # Configure the default scope given to Warden. By default it's the first
--   # devise role declared in your routes (usually :user).
--   # config.default_scope = :user
-- 
--   # Set this configuration to false if you want /users/sign_out to sign out
--   # only the current scope. By default, Devise signs out all scopes.
--   # config.sign_out_all_scopes = true
-- 
--   # ==> Navigation configuration
--   # Lists the formats that should be treated as navigational. Formats like
--   # :html, should redirect to the sign in page when the user does not have
--   # access, but formats like :xml or :json, should return 401.
--   #
--   # If you have any extra navigational formats, like :iphone or :mobile, you
--   # should add them to the navigational formats lists.
--   #
--   # The "*/*" below is required to match Internet Explorer requests.
--   # config.navigational_formats = ['*/*', :html]
-- 
--   # The default HTTP method used to sign out a resource. Default is :delete.
     config.sign_out_via = :delete
-- 
--   # ==> OmniAuth
--   # Add a new OmniAuth provider. Check the wiki for more information on setting
--   # up on your models and hooks.
--   # config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'
-- 
--   # ==> Warden configuration
--   # If you want to use other strategies, that are not supported by Devise, or
--   # change the failure app, you can configure them inside the config.warden block.
--   #
--   # config.warden do |manager|
--   #   manager.intercept_401 = false
--   #   manager.default_strategies(scope: :user).unshift :some_external_strategy
--   # end
-- 
--   # ==> Mountable engine configurations
--   # When using Devise inside an engine, let's call it `MyEngine`, and this engine
--   # is mountable, there are some extra configurations to be taken into account.
--   # The following options are available, assuming the engine is mounted as:
--   #
--   #     mount MyEngine, at: '/my_engine'
--   #
--   # The router that invoked `devise_for`, in the example above, would be:
--   # config.router_name = :my_engine
--   #
--   # When using OmniAuth, Devise cannot automatically set OmniAuth path,
--   # so you need to do it manually. For the users scope, it would be:
--   # config.omniauth_path_prefix = '/my_engine/users/auth'
-- end

================================================================================
 ./config/initializers/filter_parameter_logging.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # Configure sensitive parameters which will be filtered from the log file.
   Rails.application.config.filter_parameters += [:password]

================================================================================
 ./config/initializers/inflections.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # Add new inflection rules using the following format. Inflections
-- # are locale specific, and you may define rules for as many different
-- # locales as you wish. All of these examples are active by default:
-- # ActiveSupport::Inflector.inflections(:en) do |inflect|
-- #   inflect.plural /^(ox)$/i, '\1en'
-- #   inflect.singular /^(ox)en/i, '\1'
-- #   inflect.irregular 'person', 'people'
-- #   inflect.uncountable %w( fish sheep )
-- # end
-- 
-- # These inflection rules are supported but not enabled by default:
-- # ActiveSupport::Inflector.inflections(:en) do |inflect|
-- #   inflect.acronym 'RESTful'
-- # end

================================================================================
 ./config/initializers/mime_types.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # Add new mime types for use in respond_to blocks:
-- # Mime::Type.register "text/richtext", :rtf

================================================================================
 ./config/initializers/pagy.rb
================================================================================
   require 'pagy/extras/bootstrap'
   Pagy::DEFAULT[:items] = 5

================================================================================
 ./config/initializers/wrap_parameters.rb
================================================================================
-- # Be sure to restart your server when you modify this file.
-- 
-- # This file contains settings for ActionController::ParamsWrapper which
-- # is enabled by default.
-- 
-- # Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
   ActiveSupport.on_load(:action_controller) do
     wrap_parameters format: [:json]
-- end
-- 
-- # To enable root element in JSON for ActiveRecord objects.
-- # ActiveSupport.on_load(:active_record) do
-- #   self.include_root_in_json = true
-- # end

================================================================================
 ./config/routes.rb
================================================================================
   Rails.application.routes.draw do
--   
     get 'users/show'
-- 
     root 'home#index'
-- 
     devise_for :users, skip: [:registrations, :sessions], :controllers => { :registrations => "users/registrations" }
-- 
     devise_scope :user do
       get 'login', to: 'users/sessions#new', as: :"new_user_session"
       post 'login', to: 'users/sessions#create', as: :"user_session"
       delete 'logout', to: 'users/sessions#destroy', as: :"destroy_user_session"
       get 'create_user', to: 'users/registrations#new', as: :"new_user_registration"
       post 'create_user', to: 'users/registrations#create', as: :"user_registration"
       post 'create_user_as_admin', to: 'users/registrations#create_as_admin', as: :"admin_registration"
       delete '', to: 'users/registrations#destroy', as: :""
       patch 'users/:id', to: 'users/registrations#update', as: :"update_user_registration"
       put 'users/:id', to: 'users/registrations#update', as: :""
       get 'users/:id/edit', to: 'users/registrations#edit', as: :"edit_user_registration"
-- 
--   end
-- 
     resources :rooms
     resources :appointments
     get 'my-appointments' => 'appointments#my_appointments'
     get 'all-appointments' => 'appointments#all_appointments'
     get 'backoffice', to: 'backoffice/dashboard#index'
     get 'signup_user', to: 'backoffice/dashboard#signup_user'
-- 
--   # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
-- end

================================================================================
 ./spec/controllers/rooms_index_controller_spec.rb
================================================================================
   require 'rails_helper'
-- 
   describe RoomsController do
       let(:user) { FactoryBot.create(:user) }
-- 
       describe 'GET #index' do
           context 'when user is signed in' do 
               before do
                   sign_in user
                   get :index
--             end
-- 
               it 'should render index template' do
                   expect(response).to render_template(:index)
--             end
-- 
--             
               it "should render 5 or less rooms on the first page" do
                   room = Room.all
                   test_room = room[0..4]
                   expect(assigns(:rooms)).to eq(test_room)
--             end
--             
               context 'exists only one room' do
                   before do
                       @room = FactoryBot.create(:room)
--                 end
--                 
                   it 'should render a collection of rooms' do
                       expect(assigns(:rooms)).not_to be_nil
--                 end
--     
                   it "should be possible to redirect to page 1 and render 5 or less rooms" do
                       expect(:get => "/rooms?page=1").to route_to(:controller => "rooms", :action => "index", :page => "1")
                       expect(:get => "/rooms?page=1").to be_routable
                       get "index", :params => {:page => "1"}
                       room = Room.all
                       test_room = room[0..4]
                       expect(assigns(:rooms)).to eq(test_room)
--                 end
-- 
                   it "should not be possible to redirect to page 2" do
                       expect {get "index", :params => {:page => "2"}}.to raise_error(Pagy::OverflowError)
--                 end
-- 
--             end
-- 
               context 'exist 10 rooms' do
                   before do
                       10.times {FactoryBot.create(:room)}
--                 end
-- 
                   it "should be possible to redirect to page 2 and render 5 or less rooms" do
                       expect(:get => "/rooms?page=2").to route_to(:controller => "rooms", :action => "index", :page => "2")
                       expect(:get => "/rooms?page=2").to be_routable
                       room = Room.all
                       test_room = room[5..9]
                       get "index", :params => {:page => "2"}
                       expect(assigns(:rooms)).to eq(test_room)
--                 end
-- 
                   it "should not be possible to redirect to page 3" do
                       expect {get "index", :params => {:page => "3"}}.to raise_error(Pagy::OverflowError)
--                 end
--                 
--             end
-- 
--         end
--         
           context 'when user is not signed in' do
               before do
                   get :index
--             end
-- 
               it 'should render a flash message' do
                   expect(flash[:danger]).not_to be_nil
--             end
--         end
-- 
--     end
-- 
-- end

================================================================================
 ./spec/factories/appointment.rb
================================================================================
   FactoryBot.define do
       factory :appointment do
           appointment_date {'22-06-2018'}
           start_time {'10:00:00'}
--     end
-- end

================================================================================
 ./spec/factories/room.rb
================================================================================
   FactoryBot.define do
       factory :room do
           name {'Fake-123'}
           location {'Fake Location'}
           students {40}
-- 
--     end
-- end

================================================================================
 ./spec/factories/user.rb
================================================================================
   FactoryBot.define do
       factory :user do
           email {'silva@silva.com'}
           password {'123123'}
           username {'testesilva'}
           registration {'150115464'}
           course {'Artes Cenicas'}
           is_admin {false}
--     end
-- end

================================================================================
 ./spec/rails_helper.rb
================================================================================
-- # This file is copied to spec/ when you run 'rails generate rspec:install'
   require 'shoulda/matchers'
   require 'spec_helper'
   ENV['RAILS_ENV'] ||= 'test'
   require File.expand_path('../../config/environment', __FILE__)
-- # Prevent database truncation if the environment is production
   abort("The Rails environment is running in production mode!") if Rails.env.production?
   require 'rspec/rails'
-- # Add additional requires below this line. Rails is not loaded until this point!
-- 
-- # Requires supporting ruby files with custom matchers and macros, etc, in
-- # spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are
-- # run as spec files by default. This means that files in spec/support that end
-- # in _spec.rb will both be required and run as specs, causing the specs to be
-- # run twice. It is recommended that you do not name files matching this glob to
-- # end with _spec.rb. You can configure this pattern with the --pattern
-- # option on the command line or in ~/.rspec, .rspec or `.rspec-local`.
-- #
-- # The following line is provided for convenience purposes. It has the downside
-- # of increasing the boot-up time by auto-requiring all files in the support
-- # directory. Alternatively, in the individual `*_spec.rb` files, manually
-- # require only the support files necessary.
-- #
-- # Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }
-- 
-- # Checks for pending migrations and applies them before tests are run.
-- # If you are not using ActiveRecord, you can remove this line.
   ActiveRecord::Migration.maintain_test_schema!
-- 
   RSpec.configure do |config|
--   # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
     config.fixture_path = "#{::Rails.root}/spec/fixtures"
     config.include Devise::Test::ControllerHelpers, type: :controller
     config.include Devise::Test::IntegrationHelpers, type: :request
     config.include(Shoulda::Matchers::ActiveModel, type: :model)
     config.include(Shoulda::Matchers::ActiveRecord, type: :model)
--   # If you're not using ActiveRecord, or you'd prefer not to run each of your
--   # examples within a transaction, remove the following line or assign false
--   # instead of true.
     config.use_transactional_fixtures = true
-- 
--   # RSpec Rails can automatically mix in different behaviours to your tests
--   # based on their file location, for example enabling you to call `get` and
--   # `post` in specs under `spec/controllers`.
--   #
--   # You can disable this behaviour by removing the line below, and instead
--   # explicitly tag your specs with their type, e.g.:
--   #
--   #     RSpec.describe UsersController, :type => :controller do
--   #       # ...
--   #     end
--   #
--   # The different available types are documented in the features, such as in
--   # https://relishapp.com/rspec/rspec-rails/docs
     config.infer_spec_type_from_file_location!
-- 
--   # Filter lines from Rails gems in backtraces.
     config.filter_rails_from_backtrace!
--   # arbitrary gems may also be filtered via:
--   # config.filter_gems_from_backtrace("gem name")
-- 
-- 
     Shoulda::Matchers.configure do |config|
       config.integrate do |with|
         with.test_framework :rspec
         with.library :rails
--     end
--   end
-- 
-- end

